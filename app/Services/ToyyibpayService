<?php

namespace App\Services;

use App\Models\Payment;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;

class ToyyibpayService
{
    private string $apiKey;
    private string $categoryCode;
    private string $baseUrl;

    public function __construct()
    {
        $this->apiKey = config('services.toyyibpay.api_key');
        $this->categoryCode = config('services.toyyibpay.category_code');
        $this->baseUrl = config('services.toyyibpay.base_url', 'https://toyyibpay.com');
        
        if (empty($this->apiKey) || empty($this->categoryCode)) {
            throw new \Exception('Toyyibpay configuration is incomplete. Please check your .env file.');
        }
    }

    public function createBill(Payment $payment): array
    {
        $billExternalRef = 'QUIZ_' . $payment->id . '_' . time();
        
        $billData = [
            'userSecretKey' => $this->apiKey,
            'categoryCode' => $this->categoryCode,
            'billName' => 'AI Quiz Generator - Premium Upgrade',
            'billDescription' => 'Upgrade to Premium for unlimited AI generations and flashcards',
            'billPriceSetting' => 1, // Fixed price
            'billPayorInfo' => 1, // Collect payer info
            'billAmount' => $payment->amount * 100, // Convert to cents
            'billReturnUrl' => route('payment.return'),
            'billCallbackUrl' => route('payment.callback'),
            'billExternalReferenceNo' => $billExternalRef,
            'billTo' => $payment->user->name,
            'billEmail' => $payment->user->email,
            'billPhone' => '', // Optional
            'billSplitPayment' => 0,
            'billSplitPaymentArgs' => '',
            'billPaymentChannel' => '0', // All channels
            'billContentEmail' => 'Thank you for upgrading to Premium!',
            'billChargeToCustomer' => 1,
        ];

        try {
            $response = Http::timeout(30)->post($this->baseUrl . '/index.php/api/createBill', $billData);
            
            if ($response->successful()) {
                $responseData = $response->json();
                
                if (isset($responseData[0]['BillCode'])) {
                    // Update payment with Toyyibpay details
                    $payment->update([
                        'toyyibpay_bill_code' => $responseData[0]['BillCode'],
                        'toyyibpay_bill_external_ref' => $billExternalRef,
                        'toyyibpay_category_code' => $this->categoryCode,
                        'toyyibpay_response' => $responseData,
                    ]);

                    return [
                        'success' => true,
                        'bill_code' => $responseData[0]['BillCode'],
                        'payment_url' => $this->baseUrl . '/' . $responseData[0]['BillCode'],
                        'external_ref' => $billExternalRef,
                    ];
                } else {
                    Log::error('Toyyibpay bill creation failed', [
                        'payment_id' => $payment->id,
                        'response' => $responseData,
                    ]);
                    
                    return [
                        'success' => false,
                        'message' => $responseData[0]['msg'] ?? 'Failed to create payment bill',
                    ];
                }
            } else {
                Log::error('Toyyibpay API request failed', [
                    'payment_id' => $payment->id,
                    'status' => $response->status(),
                    'response' => $response->body(),
                ]);
                
                return [
                    'success' => false,
                    'message' => 'Payment service is currently unavailable. Please try again later.',
                ];
            }
        } catch (\Exception $e) {
            Log::error('Toyyibpay service error', [
                'payment_id' => $payment->id,
                'error' => $e->getMessage(),
            ]);
            
            return [
                'success' => false,
                'message' => 'An error occurred while processing your payment. Please try again.',
            ];
        }
    }

    public function getBillTransactions(string $billCode): array
    {
        try {
            $response = Http::timeout(30)->post($this->baseUrl . '/index.php/api/getBillTransactions', [
                'billCode' => $billCode,
                'userSecretKey' => $this->apiKey,
            ]);

            if ($response->successful()) {
                return $response->json();
            }

            return [];
        } catch (\Exception $e) {
            Log::error('Failed to get bill transactions', [
                'bill_code' => $billCode,
                'error' => $e->getMessage(),
            ]);
            
            return [];
        }
    }

    public function verifyCallback(array $callbackData): bool
    {
        // Verify required fields
        $requiredFields = ['refno', 'status', 'billcode', 'order_id', 'amount'];
        
        foreach ($requiredFields as $field) {
            if (!isset($callbackData[$field])) {
                Log::warning('Missing required field in callback', [
                    'field' => $field,
                    'callback_data' => $callbackData,
                ]);
                return false;
            }
        }

        // Additional verification can be added here
        // For example, verifying hash signature if provided by Toyyibpay
        
        return true;
    }

    public function processCallback(array $callbackData): array
    {
        if (!$this->verifyCallback($callbackData)) {
            return [
                'success' => false,
                'message' => 'Invalid callback data',
            ];
        }

        $billCode = $callbackData['billcode'];
        $status = $callbackData['status'];
        $amount = $callbackData['amount'] / 100; // Convert from cents

        // Find payment by bill code
        $payment = Payment::where('toyyibpay_bill_code', $billCode)->first();

        if (!$payment) {
            Log::error('Payment not found for callback', [
                'bill_code' => $billCode,
                'callback_data' => $callbackData,
            ]);
            
            return [
                'success' => false,
                'message' => 'Payment record not found',
            ];
        }

        // Process based on status
        if ($status == '1') { // Success
            if ($payment->isPending()) {
                $payment->markAsSuccess($callbackData);
                
                Log::info('Payment completed successfully', [
                    'payment_id' => $payment->id,
                    'user_id' => $payment->user_id,
                    'amount' => $amount,
                ]);
            }
            
            return [
                'success' => true,
                'payment' => $payment,
                'message' => 'Payment completed successfully',
            ];
        } else {
            // Failed payment
            if ($payment->isPending()) {
                $payment->markAsFailed($callbackData);
                
                Log::info('Payment failed', [
                    'payment_id' => $payment->id,
                    'user_id' => $payment->user_id,
                    'status' => $status,
                ]);
            }
            
            return [
                'success' => false,
                'payment' => $payment,
                'message' => 'Payment failed or was cancelled',
            ];
        }
    }
}